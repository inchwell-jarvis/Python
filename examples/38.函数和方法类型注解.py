# 函数和方法类型注解指定了函数或方法的参数类型和返回类型。在 Python 中，可以使用类型注解来提供这些信息。下面是一个示例：
def add(x: int, y: int) -> int:
    """
    一个简单的函数，接受两个整数参数，并返回它们的和。
    """
    return x + y


result: int = add(3, 5)
print(result)  # 输出: 8


# 在这个示例中：
#
# add 函数接受两个参数 x 和 y，并且类型注解指定了它们都是整数类型（int）。
# -> int 指定了函数的返回类型为整数类型。
# 函数体中的实际代码与类型注解一致，函数会返回两个参数的和。


# 对于方法类型注解，可以在类中定义方法时使用相同的语法：
class Calculator:
    def add(self, x: int, y: int) -> int:
        """
        一个简单的方法，接受两个整数参数，并返回它们的和。
        """
        return x + y


calc = Calculator()
result: int = calc.add(3, 5)
print(result)  # 输出: 8

# 在这个示例中，add 方法的类型注解与函数示例中的注解相同，只是将函数定义在了类中。
#
# 类型注解并不会改变 Python 的运行时行为，但可以帮助开发人员更清晰地了解函数和方法的参数和返回值类型，以及在一些静态类型检查工具中进行类型检查。
